package cep;

import com.ftn.sbnz.model.models.Lake;
import com.ftn.sbnz.model.models.HydroelectricPowerPlant;
import com.ftn.sbnz.model.models.Turbine;
import com.ftn.sbnz.model.events.TurbineOverheatingEvent;
import com.ftn.sbnz.model.events.DieselGeneratorOnEvent;
import com.ftn.sbnz.model.events.WaterFlowDecreasedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;
import com.ftn.sbnz.model.events.WaterLevelChangedEvent;
import com.ftn.sbnz.model.events.WaterSpeedChangedEvent;
import com.ftn.sbnz.model.events.IncreasedRainEvent;
import com.ftn.sbnz.model.events.DecreasedRainEvent;
import com.ftn.sbnz.model.events.WaterTemperatureChangedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;
import com.ftn.sbnz.model.events.MeasuringEvent;
import com.ftn.sbnz.model.events.AlarmDeactivatedEvent;
import com.ftn.sbnz.model.events.AlarmNotDeactivated;
import com.ftn.sbnz.model.events.Alarm;
import com.ftn.sbnz.service.AlarmService;
import com.ftn.sbnz.model.events.SeriousMalfunctionAlarm;
import com.ftn.sbnz.repository.Database;

declare IncreasedPowerGenerationAlarm
    @role(event)
    lakeId: Long
end

declare StopPowerPlant
    @role(event)
    hydroPowerPlantId: Long
end

rule "#1 Water speed and water level under limit"
    when
        $l: Lake($l1Id: id)
        $h: HydroelectricPowerPlant($hppId: id)
        Number(intValue > 5) from accumulate(
            $w: MeasuringEvent(lakeId == $l1Id, waterSpeed < 40, waterLvl < 40)
            over window:time(30m), count($w)
        )
        (not Alarm(reason == "Electricity production decreased", hydroPowerPlantId == $hppId))
    then
        insert(new Alarm($hppId, "Electricity production decreased", "medium"));
        AlarmService.addAlarm("Electricity production decreased", "medium");
        System.out.println("Electricity production decreased");
end

rule "#2 Water temperature and water level under limit"
    when
        $l: Lake($l1Id: id)
        $h: HydroelectricPowerPlant($hppId: id)
        Number(intValue > 5) from accumulate(
            $w: MeasuringEvent(lakeId == $l1Id, waterTemp < 40, waterLvl < 40)
            over window:time(30m), count($w)
        )
        (not Alarm(reason == "Equipment malfunction due temperature", hydroPowerPlantId == $hppId))
    then
        insert(new Alarm($hppId, "Equipment malfunction due temperature", "medium"));
        AlarmService.addAlarm("Equipment malfunction due temperature", "medium");
        System.out.println("Equipment malfunction due temperature");
end

rule "#4 Water level high and water speed low"
    when
        $l: Lake($l1Id: id)
        $h: HydroelectricPowerPlant($hppId: id)
        Number(intValue > 5) from accumulate(
            $w: MeasuringEvent(lakeId == $l1Id, waterLvl > 60, waterSpeed < 40)
            over window:time(30m), count($w)
        )
        (not Alarm(reason == "Equipment malfunction", hydroPowerPlantId == $hppId))
    then
        insert(new Alarm($hppId, "Equipment malfunction", "medium"));
        AlarmService.addAlarm("Equipment malfunction", "medium");
        System.out.println("Equipment malfunction");
end

 rule "#8 Water speed fast and water level high, increased generation"
     when
         $l: Lake($l1Id: id)
         $h: HydroelectricPowerPlant($hppId: id)
         Number(intValue > 5) from accumulate(
             $w: MeasuringEvent(lakeId == $l1Id, waterSpeed > 70, waterLvl > 70)
             over window:time(30m), count($w)
         )
        (not Alarm(reason == "Water overflow possible!", hydroPowerPlantId == $hppId))
     then
         insert(new Alarm($hppId, "Water overflow possible!", "medium"));
         AlarmService.addAlarm("Water overflow possible!", "medium");
         System.out.println("Water overflow possible!");
 end

 rule "#10 Too frequent water level changes"
     when
         $l: Lake($l1Id: id)
         $h: HydroelectricPowerPlant($hppId: id)
         MeasuringEvent(lakeId == $l1Id)
         Number(intValue > 10 ) from accumulate(
             $w: MeasuringEvent(lakeId == $l1Id, waterLvl < 30 || waterLvl > 80)
             over window:time(15m), count($w)
         )
        (not Alarm(reason == "Water level changing iregularly", hydroPowerPlantId == $hppId))
     then
         insert(new Alarm($hppId, "Water level changing iregularly", "medium"));
         AlarmService.addAlarm("Water level changing iregularly", "medium");
         System.out.println("Water level changing iregularly");
 end

rule "More than 3 of any of alarms fired in last 30min"
no-loop true
    when
        Alarm($ppId: hydroPowerPlantId, severity == "medium")
        Number(intValue >= 3) from accumulate(
            $al: Alarm(hydroPowerPlantId == $ppId, severity == "medium")
            over window:time(30m), count($al)
        )
        (not SeriousMalfunctionAlarm(hydroPowerPlantId == $ppId))
    then
        insert(new SeriousMalfunctionAlarm($ppId));
        AlarmService.addAlarm("Serious malfunction", "high");
        System.out.println("Serious malfunction");
end

rule "Serious alarm is not resolved"
no-loop true
    when
        $sa: SeriousMalfunctionAlarm($hppId: hydroPowerPlantId)
        not ($a: AlarmDeactivatedEvent(this after[1m] $sa))
        not (StopPowerPlant(hydroPowerPlantId == $hppId))
    then
        insert(new StopPowerPlant($hppId));
        Database.appWorking = false;
        System.out.println("Serious alarm not resolved");
end

rule "Serious alarm resolved"
no-loop true
    when
        $sa: SeriousMalfunctionAlarm($hppId: hydroPowerPlantId)
        Number(intValue == 1)  from accumulate(
            $al: AlarmDeactivatedEvent(hydroPowerPlantId == $hppId)
            over window:time(1m), count($al)
        )
        (not Alarm(reason == "Alarm resolved", hydroPowerPlantId == $hppId, severity == "low"))
    then
        insert(new Alarm($hppId, "Alarm resolved", "low"));
        AlarmService.addAlarm("Alarm resolved", "low");
        System.out.println("Alarm resolved");
end
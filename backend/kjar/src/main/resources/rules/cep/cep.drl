package cep;

import com.ftn.sbnz.model.models.Lake;
import com.ftn.sbnz.model.models.HydroelectricPowerPlant;
import com.ftn.sbnz.model.models.Turbine;
import com.ftn.sbnz.model.events.TurbineOverheatingEvent;
import com.ftn.sbnz.model.events.DieselGeneratorOnEvent;
import com.ftn.sbnz.model.events.WaterFlowDecreasedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;
import com.ftn.sbnz.model.events.WaterLevelChangedEvent;
import com.ftn.sbnz.model.events.WaterSpeedChangedEvent;
import com.ftn.sbnz.model.events.IncreasedRainEvent;
import com.ftn.sbnz.model.events.DecreasedRainEvent;
import com.ftn.sbnz.model.events.WaterTemperatureChangedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;
import com.ftn.sbnz.model.events.MeasuringEvent;
import com.ftn.sbnz.model.events.AlarmDeactivatedEvent;
import com.ftn.sbnz.model.events.AlarmNotDeactivated;
import com.ftn.sbnz.model.events.Alarm;
import com.ftn.sbnz.service.AlarmService;
import com.ftn.sbnz.model.events.SeriousMalfunctionAlarm;

declare IncreasedPowerGenerationAlarm
    @role(event)
    lakeId: Long
end

declare StopPowerPlant
    @role(event)
    hydroPowerPlantId: Long
end

rule "#1 Water speed and water level under limit"
    when
        $l: Lake($l1Id: id)
        $h: HydroelectricPowerPlant($hppId: id)
        Number(intValue > 5) from accumulate(
            $w: MeasuringEvent(lakeId == $l1Id, waterSpeed < 40, waterLvl < 40)
            over window:time(30m), count($w)
        )
        (not Alarm(reason == "Electricity production decreased", hydroPowerPlantId == $hppId))
    then
        insert(new Alarm($hppId, "Electricity production decreased", "medium"));
        AlarmService.addAlarm("Electricity production decreased", "medium");
        System.out.println("Electricity production decreased");
end

rule "#2 Water temperature and water level under limit"
    when
        $l: Lake($l1Id: id)
        $h: HydroelectricPowerPlant($hppId: id)
        Number(intValue > 5) from accumulate(
            $w: MeasuringEvent(lakeId == $l1Id, waterTemp < 40, waterLvl < 40)
            over window:time(30m), count($w)
        )
        (not Alarm(reason == "Equipment malfunction due temperature", hydroPowerPlantId == $hppId))
    then
        insert(new Alarm($hppId, "Equipment malfunction due temperature", "medium"));
        AlarmService.addAlarm("Equipment malfunction due temperature", "medium");
        System.out.println("Equipment malfunction due temperature");
end

rule "#3 Decreased rain and water level under limit"
    when
        $l: Lake($l1Id: id, waterLvl < 20)
        $h: HydroelectricPowerPlant($hppId: id)
        DecreasedRainEvent(lakeId == $l1Id)
        (not Alarm(reason == "Electricity production decreased due rain", hydroPowerPlantId == $hppId))
    then
        insert(new Alarm($hppId, "Electricity production decreased due rain", "medium"));
        AlarmService.addAlarm("Electricity production decreased due rain", "medium");
        System.out.println("Electricity production decreased due rain");
end

rule "#4 Water level high and water speed low"
    when
        $l: Lake($l1Id: id)
        $h: HydroelectricPowerPlant($hppId: id)
        Number(intValue > 5) from accumulate(
            $w: MeasuringEvent(lakeId == $l1Id, waterLvl > 40, waterSpeed < 20)
            over window:time(30m), count($w)
        )
        (not Alarm(reason == "Equipment malfunction", hydroPowerPlantId == $hppId))
    then
        insert(new Alarm($hppId, "Equipment malfunction", "medium"));
        AlarmService.addAlarm("Equipment malfunction", "medium");
        System.out.println("Equipment malfunction");
end

// rule "#5 Increased rain and water level high"
//     // timer ( cron:* 0/15 * * * ? )
//     when
//         $l: Lake($l1Id: id, waterLvl > 40)
//         $h: HydroelectricPowerPlant()
//         IncreasedRainEvent(lakeId == $l1Id)
//     then
//         insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Water overflow"));
//         System.out.println("Water overflow");
// end

// rule "#7 In 10 min big water level change"
//     // timer ( cron:* 0/10 * * * ? )
//     when
//         $l: Lake($l1Id: id)
//         $h: HydroelectricPowerPlant()
//         MeasuringEvent(lakeId == $l1Id, $waterTemperature: waterTemp)
//         Number(intValue > 0) from accumulate(
//             $w: MeasuringEvent(lakeId == $l1Id, waterTemp < $waterTemperature - 10 || waterTemp > $waterTemperature + 10)
//             over window:time(10m), count($w)
//         )
//     then
//         insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Equipment malfunction"));
//         System.out.println("Equipment malfunction");
// end


// rule "#8 Water speed fast and water level high, increased generation"
//     // timer ( cron:* 0/10 * * * ? )
//     when
//         $l: Lake($l1Id: id)
//         $h: HydroelectricPowerPlant()
//         Number(intValue > 5) from accumulate(
//             $w: MeasuringEvent(lakeId == $l1Id, waterSpeed > 40, waterLvl > 40)
//             over window:time(30m), count($w)
//         )
//     then
//         insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Increased power generation"));
//         System.out.println("Increased power generation");
// end

// rule "#10 Big change in water level in last 15min"
//     // timer ( cron:* 0/15 * * * ? )
//     when
//         $l: Lake($l1Id: id)
//         $h: HydroelectricPowerPlant()
//         MeasuringEvent(lakeId == $l1Id, $waterLevel: waterLvl)
//         Number(intValue > 0) from accumulate(
//             $w: MeasuringEvent(lakeId == $l1Id, waterLvl < $waterLevel - 15 || waterLvl > $waterLevel + 15)
//             over window:time(15m), count($w)
//         )
//     then
//         insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Hydroelectric power plant malfunction"));
//         System.out.println("Hydroelectric power plant malfunction");
// end

rule "More than 3 of any of alarms fired in last 30min"
no-loop true
    when
        Alarm($ppId: hydroPowerPlantId, severity == "medium")
        Number(intValue == 3) from accumulate(
            $al: Alarm(hydroPowerPlantId == $ppId)
            over window:time(30m), count($al)
        )
        (not SeriousMalfunctionAlarm(hydroPowerPlantId == $ppId))
    then
        insert(new SeriousMalfunctionAlarm($ppId));
        AlarmService.addAlarm("Serious malfunction", "high");
        System.out.println("Serious malfunction");
end

rule "Serious alarm is not resolved"
no-loop true
    when
        $sa: SeriousMalfunctionAlarm($hppId: hydroPowerPlantId)
        Number(intValue == 1)  from accumulate(
            $al: AlarmDeactivatedEvent(hydroPowerPlantId == $hppId)
            over window:time(1m), count($al)
        )
        not (StopPowerPlant(hydroPowerPlantId == $hppId))
    then
        insert(new StopPowerPlant($hppId));
        System.out.println("Serious alarm not resolved");
end

rule "Serious alarm resolved"
no-loop true
    when
        $sa: SeriousMalfunctionAlarm($hppId: hydroPowerPlantId)
        Number(intValue == 1)  from accumulate(
            $al: AlarmDeactivatedEvent(hydroPowerPlantId == $hppId)
            over window:time(1m), count($al)
        )
        (not Alarm(reason == "Alarm resolved", hydroPowerPlantId == $hppId, severity == "low"))
    then
        insert(new Alarm($hppId, "Alarm resolved", "low"));
        AlarmService.addAlarm("Alarm resolved", "low");
        System.out.println("Alarm resolved");
end

// rule "Temperature over 25 C"
//     when
//         $l: Lake(waterTemp > 25)
//         not (TurbineOverheatingEvent($l.id == lakeId))
//         $h: HydroelectricPowerPlant()
//     then
//         for (var turbine : $h.getTurbines()) {
//             turbine.setOverheatingDanger(true);
//         }
//         insert(new TurbineOverheatingEvent(lakeId: $l.id));
//         System.out.println("Temperature is over 25 degrees Celsius. Danger of turbine overheating is raised.");
// end

// rule "Adjust water flow_5"
// no-loop true
// when
//     $h: HydroelectricPowerPlant()
//     $l: Lake()
//     Number(intValue >= 5) from accumulate(
//         $me: MeasuringEvent(windSpeed > 50,
//                 windSpeed <= 250,
//                 waterLvl > 70,
//                 waterLvl <= 100,
//                 waterTemp > 20,
//                 waterTemp <= 99)
//         over window:time(60m), count($me)
//     )

// then
//     for (Turbine t : $h.getTurbines()) {
//         t.setWaterFlow(t.getWaterFlow() * action);
//     }
//     System.out.println("Water flow in turbines adjusted.");
// end

//rule "2"
//  when
//    $u: User($uId: userId, $ip: ip)
//    Number(intValue > 3) from accumulate(
//        $t: TimeoutEvent(userId == $uId)
//        over window:time(5m), count($t)
//    )
//  then
//    System.out.println("ZABRANA");
//end
//
//rule "3"
//  when
//    $l: Lake()
//    Number(intValue > 5) from accumulate(
//        $t: TimeoutEvent(userId == $uId)
//        over window:time(60m), count($t)
//    )
//  then
//    System.out.println("ZABRANA");
//end
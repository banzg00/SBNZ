package cep;

import com.ftn.sbnz.model.models.Lake;
import com.ftn.sbnz.model.models.HydroelectricPowerPlant;
import com.ftn.sbnz.model.models.Turbine;
import com.ftn.sbnz.model.events.TurbineOverheatingEvent;
import com.ftn.sbnz.model.events.DieselGeneratorOnEvent;
import com.ftn.sbnz.model.events.WaterFlowDecreasedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;
import com.ftn.sbnz.model.events.WaterLevelChangedEvent;
import com.ftn.sbnz.model.events.WaterSpeedChangedEvent;
import com.ftn.sbnz.model.events.IncreasedRainEvent;
import com.ftn.sbnz.model.events.DecreasedRainEvent;
import com.ftn.sbnz.model.events.WaterTemperatureChangedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;
import com.ftn.sbnz.model.events.ElectricityProductionDecreasedEvent;

declare ElectricityProductionDecreasedAlarm
    @role(event)
    lakeId: Long
end

declare EquipmentMalfunctionAlarm
    @role(event)
    lakeId: Long
end

declare WaterOverflowAlarm
    @role(event)
    lakeId: Long
end

declare HydroelectricPowerPlantMulfuctionAlarm
    @role(event)
    lakeId: Long
end

declare Alarm
    @role(event)
    lakeId: Long
    severity: Integer
    type: String
end

declare SeriousMalfunctionAlarm
    @role(event)
    lakeId: Long
end

declare IncreasedPowerGenerationAlarm
    @role(event)
    lakeId: Long
end

rule "Water speed and water level under limit"
    when
        $l1: WaterSpeedChangedEvent($l1Id: lakeId, waterSpeed < 20)
        Number(intValue < 2) from accumulate(
            $w: WaterSpeedChangedEvent(lakeId == $l1Id, waterSpeed > 20)
            over window:time(30m), count($w)
        )
        $l: Lake(id == $l1Id, waterLvl < 20)
    then
        insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Electricity production decreased"));
        System.out.println("Electricity production decreased");
end

rule "Water temperature and water level under limit"
    when
        $l1: WaterTemperatureChangedEvent($l1Id: lakeId, waterTemperature < 20)
        Number(intValue < 2) from accumulate(
            $w: WaterTemperatureChangedEvent(lakeId == $l1Id, waterTemperature > 20)
            over window:time(30m), count($w)
        )
        $l: Lake(id == $l1Id, waterLvl < 20)
    then
        insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Equipment malfunction"));
        System.out.println("Equipment malfunction");
end

rule "Decreased rain and water level under limit"
    when
        $l1: DecreasedRainEvent($l1Id: lakeId)
        Number(intValue == 0) from accumulate(
            $w: IncreasedRainEvent(lakeId == $l1Id)
            over window:time(30m), count($w)
        )
        $l: Lake(id == $l1Id, waterLvl < 20)
    then
        insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Electricity production decreased"));
        System.out.println("Electricity production decreased");
end

rule "Water level high and water speed low"
    when
        $l1: WaterLevelChangedEvent($l1Id: lakeId, waterLevel > 40)
        Number(intValue < 2) from accumulate(
            $w: WaterLevelChangedEvent(lakeId == $l1Id, waterLevel < 20)
            over window:time(30m), count($w)
        )
        $l: Lake(id == $l1Id, waterSpeed < 20)
    then
        insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Equipment malfunction"));
        System.out.println("Equipment malfunction");
end

rule "Increased rain and water level high"
    when
        $l1: IncreasedRainEvent($l1Id: lakeId)
        Number(intValue == 0) from accumulate(
            $w: DecreasedRainEvent(lakeId == $l1Id)
            over window:time(30m), count($w)
        )
        $l: Lake(id == $l1Id, waterLevel > 40)
    then
        insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Water overflow"));
        System.out.println("Water overflow");
end

// rule "Increased rain and water level doesn't change"
//     when
//         $l1: IncreasedRainEvent($l1Id: lakeId)
//         Number(intValue == 0) from accumulate(
//             $w: DecreasedRainEvent(lakeId == $l1Id)
//             over window:time(30m), count($w)
//         )
//         $l: Lake(id == $l1Id, waterLevel > 40)
//     then
//         insert(new WaterOverflowAlarm(lakeId: $l1Id));
//         System.out.println("Water overflow");
// end

rule "In 10 min big water level change"
    when
        $l1: WaterTemperatureChangedEvent($l1Id: lakeId, $waterTemperature: waterTemperature)
        from accumulate(
            $w: WaterTemperatureChangedEvent(lakeId == $l1Id, waterTemperature < $waterTemperature - 10 || waterTemperature > $waterTemperature + 10)
            over window:time(10m), count($w)
        )
    then
        insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Equipment malfunction"));
        System.out.println("Equipment malfunction");
end


rule "Water speed fast and water level high, increased generation"
    when
        $l1: WaterSpeedChangedEvent($l1Id: lakeId, waterSpeed > 40)
        Number(intValue < 2) from accumulate(
            $w: WaterSpeedChangedEvent(lakeId == $l1Id, waterSpeed < 20)
            over window:time(10m), count($w)
        )
        $l: Lake(id == $l1Id, waterLevel > 40)
    then
        insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Increased power generation"));
        System.out.println("Increased power generation");
end

rule "Big change in water level in last 15min"
    when
        $l1: WaterLevelChangedEvent($l1Id: lakeId, $waterLevel: waterLevel)
        from accumulate(
            $w: WaterLevelChangedEvent(lakeId == $l1Id, waterLevel < $waterLevel - 15 || waterLevel > $waterLevel + 15)
            over window:time(15m), count($w)
        )
    then
        insert(new Alarm(lakeId: $l1Id, severity: 1, type: "Hydroelectric power plant malfunction"));
        System.out.println("Hydroelectric power plant malfunction");
end

rule "More than 3 of any of alarms fired in last 30min"
    Alarm($lId: lakeId)
    Number(intValue > 3) from accumulate(
        $a: Alarm(lakeId == $lId)
        over window:time(30m), count($a)
    )
    then
        insert(new SeriousMalfunctionAlarm());
        System.out.println("Serious malfunction");
